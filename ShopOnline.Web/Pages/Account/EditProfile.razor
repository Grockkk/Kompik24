@page "/edit-profile"
@using ShopOnline.Models.Dtos
@using ShopOnline.Web.Services
@inject IUserService userService
@inject NavigationManager navigationManager

<h3>Edytuj Profil Użytkownika</h3>

<div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
    <EditForm Model="@editedUser" OnValidSubmit="EditUser" FormName="EditProfileForm">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label>Email</label>
            <InputText @bind-Value="editedUser.Email" class="form-control" placeholder="Email"></InputText>
            <ValidationMessage For="() => editedUser.Email" />
        </div>
        <div class="mb-3">
            <label>Nazwa Użytkownika</label>
            <InputText @bind-Value="editedUser.UserName" class="form-control" placeholder="Nazwa Użytkownika"></InputText>
            <ValidationMessage For="() => editedUser.UserName" />
        </div>
        <div class="mb-3">
            <label>Nowe Hasło</label>
            <InputText @bind-Value="newPassword" type="password" class="form-control" placeholder="Nowe Hasło"></InputText>
            <ValidationMessage For="() => newPassword" />
        </div>
        <div class="mb-3">
            <label>Potwierdź Nowe Hasło</label>
            <InputText @bind-Value="confirmPassword" type="password" class="form-control" placeholder="Potwierdź Nowe Hasło"></InputText>
            <ValidationMessage For="() => confirmPassword" />
        </div>
        <div class="mb-3">
            <label>Adres</label>
            <InputText @bind-Value="editedUser.Miasto" class="form-control" placeholder="Miasto"></InputText>
            <ValidationMessage For="() => editedUser.Miasto" />
        </div>
        <div class="mb-3">
            <InputText @bind-Value="editedUser.Ulica" class="form-control" placeholder="Ulica"></InputText>
            <ValidationMessage For="() => editedUser.Ulica" />
        </div>
        <div class="mb-3">
            <InputText @bind-Value="editedUser.NumerDomu" class="form-control" placeholder="NumerDomu"></InputText>
            <ValidationMessage For="() => editedUser.NumerDomu" />
        </div>
        <div class="mb-3 text-center">
            <span class="text-danger">@errorMessage</span>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button type="submit" class="btn btn-primary">Zapisz zmiany</button>
        </div>
    </EditForm>
</div>

@code {
    private UserDto editedUser = new UserDto();
    private string? newPassword;
    private string? confirmPassword;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var usersDto = await userService.GetUsers();
        var user = usersDto.SingleOrDefault(p => p.Autentykacja == true);

        var userId = user.Id;
        editedUser = await userService.GetUser(userId);
    }

    private async Task EditUser()
    {
        try
        {
            // Sprawdź, czy nowe hasło zostało potwierdzone poprawnie
            if (newPassword != confirmPassword)
            {
                errorMessage = "Nowe hasło i potwierdzenie hasła nie pasują do siebie.";
                return;
            }

            if (editedUser.Email.Contains("@") || editedUser.Email.Contains(".pl"))
            {
                errorMessage = "Wprowadź poprawny Email.";
                return;
            }

            var usersDto = await userService.GetUsers();


            if (usersDto.SingleOrDefault(x => x.Email == editedUser.Email) != null || usersDto.SingleOrDefault(x => x.UserName == editedUser.UserName) != null)
            {
                errorMessage = "Taki użytkownik już istnieje, wprowadź inny Email lub Nazwę użytkownika";
                return;
            }

            // Aktualizuj hasło użytkownika tylko jeśli zostało wprowadzone
            if (!string.IsNullOrEmpty(newPassword))
            {
                editedUser.Password = newPassword;
            }

            // Wywołaj metodę serwisu użytkownika, aby zaktualizować dane użytkownika
            var updatedUser = await userService.UpdateUser(editedUser);

            // Sprawdź, czy użytkownik został pomyślnie zaktualizowany
            if (updatedUser == null)
            {
                errorMessage = "Aktualizacja użytkownika nie powiodła się.";
                return;
            }

            // Przekieruj do strony profilu po pomyślnej aktualizacji
            navigationManager.NavigateTo("/profile");
        }
        catch (Exception ex)
        {
            errorMessage = $"Błąd: {ex.Message}";
        }
    }
}