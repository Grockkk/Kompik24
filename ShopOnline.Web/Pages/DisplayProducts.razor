@inherits DisplayProductsBase

@foreach (var item in Products)
{
    <div class="col-md-3 mb-2">
        <a href="/ProductDetails/@item.Id">
            <div class="card">
                <img class="img-thumbnail" src="@item.ImageURL">
                <div class="card-body">
                    <h5 class="card-title mb-3">
                        @item.Name
                    </h5>
                    <p class="card-text">
                        <b>@item.Price.ToString("C")</b>
                    </p>
                    <p class="card-text">
                        Średnia ocena:
                        @{
                            if (AverageRatings.ContainsKey(item.Id))
                            {
                                var averageRating = AverageRatings[item.Id];
                                if (averageRating.HasValue && averageRating > 0)
                                {
                                    <span><i class="fas fa-star"></i> @averageRating.Value.ToString("0.0")</span>
                                }
                                else
                                {
                                    <span>Brak ocen</span>
                                }
                            }
                            else
                            {
                                <span>Ładowanie...</span>
                            }
                        }
                    </p>
                </div>
            </div>
        </a>
    </div>
}

@code {
    [Inject]
    private ICommentService CommentService { get; set; }

    private Dictionary<int, double?> AverageRatings = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        foreach (var product in Products)
        {
            var averageRating = await CalculateAverageRating(product.Id);
            AverageRatings[product.Id] = averageRating;
        }
    }

    private async Task<double?> CalculateAverageRating(int productId)
    {
        double? averageRating = null;
        // Pobierz średnią ocenę dla danego produktu
        averageRating = await CommentService.GetAverageRatingByProduct(productId);
        return averageRating;
    }
}
