@page "/ProductDetails/{Id:int}"
@inherits ProductDetailsBase

@if (Product == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <h3 class="mb-5">Informacje o produkcie</h3>
    <div class="row">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@Product.ImageURL">
        </div>
        <div class="col-md-6">
            <h3>@Product.Name</h3>
            <p class="mb-4">@Product.Description</p>
            <p class="mb-4">
                <b>
                    @Product.Price.ToString("C")&nbsp;(@Product.Qty przedmiotów)
                </b>
            </p>
            <p class="mb-4">
                Średnia ocena:
                @if (averageRating.HasValue && averageRating > 0)
                {
                    <span><i class="fas fa-star"></i> @averageRating.Value.ToString("0.0")</span>
                }
                else
                {
                    <span>Brak ocen</span>
                }
            </p>
            <div>
                @if (User != null)
                {
                    <button class="btn btn-success"
                    @onclick="() => (AddToCart_Click(new CartItemToAddDto{
                            CartId = User.Id,
                            ProductId = Product.Id,
                            Qty = 1
                        }))">
                        <b>Add to Cart</b>
                    </button>
                }
                else
                {
                    <a href="/login" class="btn btn-primary"><b>Zaloguj się aby dodać do koszyka</b></a>
                }
            </div>
        </div>
    </div>

    <!-- Display comments -->
    <h4 class="mt-5">Komentarze</h4>
    @if (User != null)
    {
        <button class="btn btn-primary mt-3" @onclick="ToggleCommentForm">Dodaj komentarz</button>
    }
    else
    {
        <p>Musisz się zalogować, aby dodać komentarz.</p>
    }

    @if (ShowCommentForm)
    {
        <EditForm Model="@NewComment" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="Value">Ocena</label>
                <div class="col-3">
                    <InputSelect id="Value" @bind-Value="NewComment.Value" class="form-select form-select-sm">
                        @foreach (var value in RatingValues)
                        {
                            <option value="@value">@value</option>
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => NewComment.Value)" />
            </div>

            <div class="mb-3">
                <label for="Content">Komentarz</label>
                <InputTextArea id="Content" @bind-Value="NewComment.Content" class="form-control" />
                <ValidationMessage For="@(() => NewComment.Content)" />
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    }

    <div class="mt-3">
        @if (Comments == null)
        {
            <p>Ładowanie...</p>
        }
        else if (Comments.Count == 0)
        {
            <p>Brak komentarzy</p>
        }
        else
        {
            @foreach (var comment in Comments)
            {
                <p class="card-title">@comment.UserName @comment.CreatedAt.ToShortDateString()</p>
                <div class="card mb-3">
                    <div class="card-body">
                        <p class="card-text">@comment.Content</p>
                        <p class="card-text">Ocena: @comment.Value</p>
                    </div>
                </div>
            }
        }
    </div>
}

@code {
    private List<CommentDto> Comments;
    private CommentDto NewComment = new CommentDto();
    private List<double> RatingValues = new List<double> { 5, 4.5, 4, 3.5, 3, 2.5, 2, 1.5, 1 };
    private bool ShowCommentForm = false;
    private double? averageRating;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadComments();
        averageRating = await CommentService.GetAverageRatingByProduct(Product.Id);
    }

    private async Task LoadComments()
    {
        try
        {
            Comments = await CommentService.GetCommentsByProduct(Product.Id);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            NewComment.ProductId = Product.Id;
            NewComment.UserName = User.UserName;
            var addedComment = await CommentService.AddComment(NewComment);
            Comments.Add(addedComment);
            NewComment = new CommentDto(); // Reset the form
            ShowCommentForm = false; // Hide the comment form after submitting
            averageRating = await CommentService.GetAverageRatingByProduct(Product.Id); // Update average rating
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void ToggleCommentForm()
    {
        ShowCommentForm = !ShowCommentForm; // Toggle the visibility of the comment form
    }
}
