@page "/ProductDetails/{Id:int}"
@inherits ProductDetailsBase

@if (Product == null && ErrorMessage == null)
{
    <DisplaySpinner />
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <h3 class="mb-5">Product Details</h3>
    <div class="row">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@Product.ImageURL">
        </div>
        <div class="col-md-6">
            <h3>@Product.Name</h3>
            <p class="mb-4">@Product.Description</p>
            <p class="mb-4">
                <b>
                    @Product.Price.ToString("C")&nbsp;(@Product.Qty items in stock)
                </b>
            </p>
            <div>
                <button class="btn btn-success"
                    @onclick="() => (AddToCart_Click(new CartItemToAddDto{
                        CartId = User.Id,
                        ProductId = Product.Id,
                        Qty = 1
                    }))">
                    <b>Add to Cart</b>
                </button>
            </div>
        </div>
    </div>

    <!-- Display comments -->
    <h4 class="mt-5">Comments</h4>
    <div class="mt-3">
        @if (Comments == null)
        {
            <p>Loading comments...</p>
        }
        else if (Comments.Count == 0)
        {
            <p>No comments available.</p>
        }
        else
        {
            @foreach (var comment in Comments)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <h5 class="card-title">@comment.UserName</h5>
                        <p class="card-text">@comment.Content</p>
                        <p class="card-text">@comment.CreatedAt.ToShortDateString()</p>
                        <p class="card-text">Rating: @comment.Value</p>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Add a new comment -->
    <h4 class="mt-5">Add a Comment</h4>
    <EditForm Model="@NewComment" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="Content">Comment</label>
            <InputTextArea id="Content" @bind-Value="NewComment.Content" class="form-control" />
            <ValidationMessage For="@(() => NewComment.Content)" />
        </div>
        <div class="mb-3">
            <label for="Value">Rating</label>
            <InputSelect id="Value" @bind-Value="NewComment.Value" class="form-control">
                @foreach (var value in RatingValues)
                {
                    <option value="@value">@value</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => NewComment.Value)" />
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    private List<CommentDto> Comments;
    private CommentDto NewComment = new CommentDto();
    private List<double> RatingValues = new List<double> { 5, 4.5, 4, 3.5, 3, 2.5, 2, 1.5, 1 };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadComments();
    }

    private async Task LoadComments()
    {
        try
        {
            Comments = await CommentService.GetCommentsByProduct(Product.Id);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            NewComment.ProductId = Product.Id;
            NewComment.UserName = User.UserName;
            var addedComment = await CommentService.AddComment(NewComment);
            Comments.Add(addedComment);
            NewComment = new CommentDto(); // Reset the form
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
